syntax = "proto3";
package chain4energy.c4echain.cfevesting;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/chain4energy/c4e-chain/x/cfevesting/types";

message VestingAccountTrace {
  uint64 id = 1;
  string address = 2;
  bool genesis = 3;
  bool from_genesis_pool = 4;
  bool from_genesis_account = 5;
}

//ContinuousVestingPeriod defines a length of time and amount of coins that will vest.
message ContinuousVestingPeriod {
  option (gogoproto.goproto_stringer) = false;

  int64 start_time = 1;
  int64 end_time = 2;
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// RepeatedContinuousVestingAccount implements the VestingAccount interface. It
// periodically vests by unlocking coins during each specified period.
message RepeatedContinuousVestingAccount {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  BaseVestingAccount base_vesting_account = 1 [
    (gogoproto.embed) = true
  ];
  int64 start_time = 2;
  repeated ContinuousVestingPeriod vesting_periods = 3 [
    (gogoproto.nullable) = false
  ];
}

message BaseVestingAccount {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  AuthBaseAccount base_account       = 1 [(gogoproto.embed) = true];
  repeated cosmos.base.v1beta1.Coin original_vesting = 2
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  repeated cosmos.base.v1beta1.Coin delegated_free = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  repeated cosmos.base.v1beta1.Coin delegated_vesting = 4
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int64 end_time = 5;
}

message AuthBaseAccount {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.equal)            = false;


  string              address        = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  google.protobuf.Any pub_key        = 2 [(gogoproto.jsontag) = "public_key,omitempty"];
  uint64              account_number = 3;
  uint64              sequence       = 4;
}